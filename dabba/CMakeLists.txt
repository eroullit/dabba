PROJECT(dabba C)

FIND_PACKAGE(Doxygen)
INCLUDE(Pod2Man)

INCLUDE(FindDebArch)

SET(CPACK_SOURCE_GENERATOR "TGZ")
SET(CPACK_GENERATOR "TGZ;DEB;RPM")
SET(CPACK_RESOURCE_FILE_README "${CMAKE_SOURCE_DIR}/README")
SET(CPACK_RESOURCE_FILE_LICENSE "${CMAKE_SOURCE_DIR}/LICENSE")
SET(CPACK_PACKAGE_DESCRIPTION_FILE "${CPACK_RESOURCE_FILE_README}")
SET(CPACK_PACKAGE_VERSION_MAJOR "0")
SET(CPACK_PACKAGE_VERSION_MINOR "3")
SET(CPACK_PACKAGE_VERSION "${CPACK_PACKAGE_VERSION_MAJOR}.${CPACK_PACKAGE_VERSION_MINOR}")
SET(CPACK_PACKAGE_NAME "${PROJECT_NAME}")
SET(CPACK_PACKAGE_FILE_NAME "${PROJECT_NAME}_${CPACK_PACKAGE_VERSION}_${CPACK_DEBIAN_PACKAGE_ARCHITECTURE}")
SET(CPACK_SOURCE_PACKAGE_FILE_NAME "${PROJECT_NAME}_${CPACK_PACKAGE_VERSION}_orig")
SET(CPACK_DEBIAN_PACKAGE_DEPENDS "libc6, libdabba-rpc${CPACK_PACKAGE_VERSION}")
SET(CPACK_PACKAGE_VENDOR "Emmanuel Roullit")
SET(CPACK_PACKAGE_CONTACT "${CPACK_PACKAGE_VENDOR} <emmanuel.roullit@gmail.com>")
SET(CPACK_PACKAGE_DESCRIPTION_SUMMARY
"CLI tool to communicate with dabbad.
 It can emit RPC messages to dabbad via:
  - unix domain sockets
  - tcp sockets
 It can solicitate dabbad node information like:
  - network interface settings
  - running capture threads
  - thread scheduling
  - thread capabilities
")
SET(CPACK_DEBIAN_PACKAGE_DESCRIPTION "${CPACK_PACKAGE_DESCRIPTION_SUMMARY}")
SET(CPACK_PACKAGE_DESCRIPTION "${CPACK_PACKAGE_DESCRIPTION_SUMMARY}")
SET(CPACK_DEBIAN_PACKAGE_PRIORITY "optional")
SET(CPACK_DEBIAN_PACKAGE_SECTION "net")
SET(CPACK_STRIP_FILES ON)
SET(CPACK_SOURCE_IGNORE_FILES "/build/;/.git/;/.gitignore;/*.swp;~$;${CPACK_SOURCE_IGNORE_FILES}")
SET(CPACK_INSTALL_CMAKE_PROJECTS "${CMAKE_CURRENT_BINARY_DIR}" "${PROJECT_NAME}" "ALL" "*")
SET(CPACK_OUTPUT_CONFIG_FILE "CPack-config-${PROJECT_NAME}.cmake")

INCLUDE(CPack)

INCLUDE_DIRECTORIES(${CMAKE_SOURCE_DIR}/${PROJECT_NAME}/include)
INCLUDE_DIRECTORIES(${CMAKE_SOURCE_DIR}/libdabba/include)
INCLUDE_DIRECTORIES(${CMAKE_SOURCE_DIR}/libdabba-rpc/include)
INCLUDE_DIRECTORIES(${CMAKE_SOURCE_DIR}/dabbad/include)
INCLUDE_DIRECTORIES(${LIBDABBA_RPC_INCLUDE_DIR})

IF(DOXYGEN_FOUND)
	CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/Doxyfile.in ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile @ONLY)
	ADD_CUSTOM_TARGET(${PROJECT_NAME}-doc ${DOXYGEN_EXECUTABLE} ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR})
	ADD_DEPENDENCIES(doc ${PROJECT_NAME}-doc)
ENDIF(DOXYGEN_FOUND)

ADD_EXECUTABLE(${PROJECT_NAME}
	dabba.c
	help.c
	cli.c
	interface.c
	interface-status.c
	interface-settings.c
	interface-driver.c
	interface-capabilities.c
	interface-coalesce.c
	interface-pause.c
	interface-offload.c
	interface-statistics.c
	rpc.c
	capture.c
	thread.c
	thread-capabilities.c
)

TARGET_LINK_LIBRARIES (${PROJECT_NAME} libdabba-rpc)

POD2MAN(${CMAKE_CURRENT_SOURCE_DIR}/dabba.c dabba 1)

FOREACH(CMD_FILE capture thread interface interface-capabilities
		 interface-coalesce interface-driver interface-offload
		 interface-pause interface-settings interface-statistics interface-status)
	POD2MAN(${CMAKE_CURRENT_SOURCE_DIR}/${CMD_FILE}.c dabba-${CMD_FILE} 1)
ENDFOREACH()

INSTALL(TARGETS dabba DESTINATION sbin COMPONENT applications)

ADD_SUBDIRECTORY(test)

# DEB PACKAGE HACK 
INSTALL(FILES debian/copyright debian/changelog.gz DESTINATION share/doc/${PROJECT_NAME})
