package dabba;

message interface_id
{
    required string name = 1;
}

message interface_id_list
{
    repeated interface_id list = 1;
}

message interface_status
{
    required interface_id id = 1;
    optional bool up = 2;
    optional bool running = 3;
    optional bool promiscous = 4;
    optional bool loopback = 5;
    optional bool connectivity = 6;
}

message interface_status_list
{
    repeated interface_status list = 1;
}

message interface_driver
{
    required interface_id id = 1;
    optional string name = 2;
    optional string version = 3;
    optional string fw_version = 4;
    optional string bus_info = 5;
}

message interface_driver_list
{
    repeated interface_driver list = 1;
}

message interface_pause
{
    required interface_id id = 1;
    optional bool autoneg = 2;
    optional bool rx_pause = 3;
    optional bool tx_pause = 4;
}

message interface_pause_list
{
    repeated interface_pause list = 1;
}

message interface_offload
{
    required interface_id id = 1;
    optional uint32 rx_csum = 2;
    optional uint32 tx_csum = 3;
    optional uint32 sg = 4;
    optional uint32 tso = 5;
    optional uint32 ufo = 6;
    optional uint32 gso = 7;
    optional uint32 gro = 8;
    optional uint32 lro = 9;
    optional uint32 rxhash = 10;
}

message interface_offload_list
{
    repeated interface_offload list = 1;
}

message interface_settings
{
    required interface_id id = 1;
    optional uint32 speed = 2;
    optional bool duplex = 3;
    optional bool autoneg = 4;
    optional uint32 mtu = 5;
    optional uint32 tx_qlen = 6;
    optional uint32 port = 7;
    optional uint32 maxrxpkt = 8;
    optional uint32 maxtxpkt = 9;
}

message interface_settings_list
{
    repeated interface_settings list = 1;
}

message interface_coalesce
{
    required interface_id id = 1;
    optional uint32 pkt_rate_high = 2;
    optional uint32 pkt_rate_low = 3;
    optional uint32 rate_sample_interval = 4;
    optional uint32 stats_block_coalesce_usecs = 5;
    optional bool use_adaptive_rx_coalesce = 6;
    optional uint32 rx_coalesce_usecs = 7;
    optional uint32 rx_coalesce_usecs_irq = 8;
    optional uint32 rx_coalesce_usecs_high = 9;
    optional uint32 rx_coalesce_usecs_low = 10;
    optional uint32 rx_max_coalesced_frames = 11;
    optional uint32 rx_max_coalesced_frames_irq = 12;
    optional uint32 rx_max_coalesced_frames_high = 13;
    optional uint32 rx_max_coalesced_frames_low = 14;
    optional bool use_adaptive_tx_coalesce = 15;
    optional uint32 tx_coalesce_usecs = 16;
    optional uint32 tx_coalesce_usecs_irq = 17;
    optional uint32 tx_coalesce_usecs_high = 18;
    optional uint32 tx_coalesce_usecs_low = 19;
    optional uint32 tx_max_coalesced_frames = 20;
    optional uint32 tx_max_coalesced_frames_irq = 21;
    optional uint32 tx_max_coalesced_frames_high = 22;
    optional uint32 tx_max_coalesced_frames_low = 23;
}

message interface_coalesce_list
{
    repeated interface_coalesce list = 1;
}

message interface_duplex_capabilites
{
    optional bool half = 1;
    optional bool full = 2;
}

message interface_option_capabilites
{
    optional bool autoneg = 1;
    optional bool pause = 2;
}

message interface_speed_capabilites
{
    optional interface_duplex_capabilites ethernet = 1;
    optional interface_duplex_capabilites fast_ethernet = 2;
    optional interface_duplex_capabilites gbps_ethernet = 3;
/* HACK field name starting by a digit are refused */
    optional interface_duplex_capabilites _10gbps_ethernet = 4;
}

message interface_capabilities
{
    required interface_id id = 1;
    optional bool tp = 3;
    optional bool aui = 4;
    optional bool mii = 5;
    optional bool fibre = 6;
    optional bool bnc = 7;
    optional interface_option_capabilites supported_opt = 8;
    optional interface_option_capabilites advertising_opt = 9;
    optional interface_option_capabilites lp_advertising_opt = 10;
    optional interface_speed_capabilites supported_speed = 11;
    optional interface_speed_capabilites advertising_speed = 12;
    optional interface_speed_capabilites lp_advertising_speed = 13;
}

message interface_capabilities_list
{
    repeated interface_capabilities list = 1;
}

message interface_statistics
{
    required interface_id id = 1;
    required uint64 rx_byte = 2;
    required uint64 rx_packet = 3;
    required uint64 rx_error = 4;
    required uint64 rx_dropped = 5;
    required uint64 rx_compressed = 6;
    required uint64 tx_byte = 7;
    required uint64 tx_packet = 8;
    required uint64 tx_error = 9;
    required uint64 tx_dropped = 10;
    required uint64 tx_compressed = 11;
    required uint64 rx_error_fifo = 12;
    required uint64 rx_error_frame = 13;
    required uint64 rx_error_crc = 14;
    required uint64 rx_error_length = 15;
    required uint64 rx_error_missed = 16;
    required uint64 rx_error_over = 17;
    required uint64 tx_error_fifo = 18;
    required uint64 tx_error_carrier = 19;
    required uint64 tx_error_heartbeat = 20;
    required uint64 tx_error_window = 21;
    required uint64 tx_error_aborted = 22;
}

message interface_statistics_list
{
    repeated interface_statistics list = 1;
}

message thread_id
{
    required uint64 id = 1;
}

message thread_id_list
{
    repeated thread_id list = 1;
}

message thread
{
    required thread_id id = 1;
    optional string cpu_set = 2;
    optional int32 type = 3;
    optional int32 sched_policy = 4;
    optional int32 sched_priority = 5;
}

message thread_list
{
    repeated thread list = 1;
}

message thread_capabilities
{
    required int32 policy = 1;
    required int32 prio_min = 2;
    required int32 prio_max = 3;
}

message thread_capabilities_list
{
    repeated thread_capabilities list = 1;
}

message dummy
{
    optional int32 unused = 1;
}

message capture
{
    optional thread_id id = 1;
    optional string pcap = 2;
    optional string interface = 3;
    optional uint64 frame_nr = 4;
    optional uint64 frame_size = 5;
}

message capture_list
{
    repeated capture list = 1;
}

service dabba_service
{
    rpc interface_status_get (interface_id_list) returns (interface_status_list);
    rpc interface_status_modify (interface_status) returns (dummy);
    rpc interface_driver_get (interface_id_list) returns (interface_driver_list);
    rpc interface_pause_get (interface_id_list) returns (interface_pause_list);
    rpc interface_pause_modify (interface_pause) returns (dummy);
    rpc interface_offload_get (interface_id_list) returns (interface_offload_list);
    rpc interface_settings_get (interface_id_list) returns (interface_settings_list);
    rpc interface_settings_modify (interface_settings) returns (dummy);
    rpc interface_coalesce_get (interface_id_list) returns (interface_coalesce_list);
    rpc interface_coalesce_modify (interface_coalesce) returns (dummy);
    rpc interface_capabilities_get (interface_id_list) returns (interface_capabilities_list);
    rpc interface_capabilities_modify (interface_capabilities) returns (dummy);
    rpc interface_statistics_get (interface_id_list) returns (interface_statistics_list);
    rpc thread_get (thread_id_list) returns (thread_list);
    rpc thread_capabilities_get (dummy) returns (thread_capabilities_list);
    rpc thread_modify (thread) returns (dummy);
    rpc capture_get (thread_id_list) returns (capture_list);
    rpc capture_start (capture) returns (dummy);
    rpc capture_stop (thread_id) returns (dummy);
}
